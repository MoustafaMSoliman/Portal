// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portal.Infrastructure.Persistence;

#nullable disable

namespace Portal.Infrastructure.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20240824110248_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Portal.Domain.Department.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SecreteryId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId1");

                    b.HasIndex("SecreteryId1");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttendaceStatus")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("CanSignOutAfter")
                        .HasColumnType("time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LateHours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("MustSignInBefore")
                        .HasColumnType("time");

                    b.Property<int?>("OvertimeHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId")
                        .IsUnique();

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartFrom")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalVacationDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalVacationDaysEmergncy")
                        .HasColumnType("int");

                    b.Property<int>("TotalVacationDaysNormally")
                        .HasColumnType("int");

                    b.Property<int?>("VacationStatus")
                        .HasColumnType("int");

                    b.Property<int>("VacationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Vacations", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Portal.Domain.User.ValueObjects.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NationalId")
                        .HasColumnType("bigint");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Employee", b =>
                {
                    b.HasBaseType("Portal.Domain.User.User");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("DepartmentId1");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Manager", b =>
                {
                    b.HasBaseType("Portal.Domain.User.Entities.Employee.Employee");

                    b.ToTable("Managers", (string)null);
                });

            modelBuilder.Entity("Portal.Domain.Department.Department", b =>
                {
                    b.HasOne("Portal.Domain.User.Entities.Employee.Entities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId1");

                    b.HasOne("Portal.Domain.User.Entities.Employee.Employee", "Secretery")
                        .WithMany()
                        .HasForeignKey("SecreteryId1");

                    b.Navigation("Manager");

                    b.Navigation("Secretery");
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Attendance", b =>
                {
                    b.HasOne("Portal.Domain.User.Entities.Employee.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Claim", b =>
                {
                    b.HasOne("Portal.Domain.User.Entities.Employee.Entities.Attendance", null)
                        .WithOne("Claim")
                        .HasForeignKey("Portal.Domain.User.Entities.Employee.Entities.Claim", "AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Vacation", b =>
                {
                    b.HasOne("Portal.Domain.User.Entities.Employee.Employee", "Employee")
                        .WithMany("Vacations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Portal.Domain.User.User", b =>
                {
                    b.HasOne("Portal.Domain.User.ValueObjects.Profile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("Portal.Domain.User.User", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Portal.Domain.User.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("Email");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Value");

                            b1.HasIndex("UserId")
                                .IsUnique();

                            b1.ToTable("UserEmails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Portal.Domain.User.ValueObjects.UserRole", "UserRole", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("UserRole");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId")
                                .IsUnique();

                            b1.ToTable("UserRoles", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Portal.Domain.User.ValueObjects.UserStatus", "UserStatus", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("UserStatus");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId")
                                .IsUnique();

                            b1.ToTable("UserStatuses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Portal.Domain.User.ValueObjects.UserType", "UserType", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("UserType");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId")
                                .IsUnique();

                            b1.ToTable("UserTypes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("UserRole")
                        .IsRequired();

                    b.Navigation("UserStatus")
                        .IsRequired();

                    b.Navigation("UserType")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Domain.User.ValueObjects.Profile", b =>
                {
                    b.OwnsOne("Portal.Domain.User.ValueObjects.Nationality", "Nationality", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NationName");

                            b1.HasKey("Id");

                            b1.ToTable("Nations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.OwnsOne("Portal.Domain.User.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ProfileId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProfileId");

                            b1.ToTable("Addresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProfileId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Nationality")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Employee", b =>
                {
                    b.HasOne("Portal.Domain.Department.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portal.Domain.User.User", null)
                        .WithOne()
                        .HasForeignKey("Portal.Domain.User.Entities.Employee.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Manager", b =>
                {
                    b.HasOne("Portal.Domain.User.Entities.Employee.Employee", null)
                        .WithOne()
                        .HasForeignKey("Portal.Domain.User.Entities.Employee.Entities.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Domain.Department.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Entities.Attendance", b =>
                {
                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Portal.Domain.User.ValueObjects.Profile", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Portal.Domain.User.Entities.Employee.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Vacations");
                });
#pragma warning restore 612, 618
        }
    }
}
